[HttpPost("requestResetPassword")]
    public async Task<ActionResult> RequestResetPassword([FromBody] MemberRequestPasswordDTO? memberRequestPasswordDto)
    {
        
        if (memberRequestPasswordDto is null || !this.ModelState.IsValid)
        {
            return BadRequest(new { message = "Invalid data" });
        }
        
        try
        {
            await _memberService.RequestPassword(memberRequestPasswordDto.Identifier);
            
            return Ok(new { message = "Password reset requested !"});
        }
        catch (DbErrorException e)
        {
            return StatusCode(500, e.Message);
        }
        catch (Exception e)
        {
            return Problem(e.Message);
        }
    }
    
    [HttpPost("resetPassword")]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status500InternalServerError)]
    [Authorize(Roles = "ResetPassword")]
    public async Task<ActionResult> ResetPassword([FromBody] MemberResetPasswordDTO? memberResetPasswordDTO, [FromQuery] string token)
    {
        if (memberResetPasswordDTO is null || !this.ModelState.IsValid)
        {
            return BadRequest(new { message = "Invalid data" });
        }
        
        try
        {
            if (_memberService.ValidateResetToken(token))
            {
                string? userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                // You can also validate other claims, such as action claim
                string? action = User.FindFirst("action")?.Value;
                
                await _memberService.ResetPassword(userId, action, memberResetPasswordDTO.OldPassword, memberResetPasswordDTO.Password, memberResetPasswordDTO.ConfirmPassword);
                return Ok(new { message = "Password changed !"});

            }
            
            return BadRequest(new { message = "Invalid token" });
        }
        catch (InvalidPasswordException e)
        {
            return BadRequest(new { message = e.Message });
        }
        catch (DbErrorException e)
        {
            return StatusCode(500, e.Message);
        }
        catch (Exception e)
        {
            return Problem(e.Message);
        }
    }
    
    public bool ValidateResetPasswordToken(string token)
        {
            try
            {
                JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
                SymmetricSecurityKey key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]!));
            
                TokenValidationParameters validationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidIssuer = _configuration["Jwt:Issuer"],
                    ValidAudience = _configuration["Jwt:Audience"],
                    IssuerSigningKey = key,
                    ClockSkew = TimeSpan.Zero
                };
    
                ClaimsPrincipal? principal = tokenHandler.ValidateToken(token, validationParameters, out SecurityToken? validatedToken);
                JwtSecurityToken? jwtToken = validatedToken as JwtSecurityToken;
    
                // Check the "action" claim to confirm it's a reset password token
                Claim? actionClaim = jwtToken?.Claims.FirstOrDefault(c => c.Type == "action");
                
                
                return actionClaim != null && actionClaim.Value == "reset_password";
            }
            catch
            {
                return false;
            }
        }
        
        public string GenerateTokenForResetPassword(Member member)
        {
            List<Claim> claims =
            [
                new Claim(ClaimTypes.NameIdentifier, member.Id.ToString()),
                new Claim(ClaimTypes.Role, "ResetPassword"),
                new Claim("action", "reset_password")
            ];
            
            return GenerateToken(claims, 5);
        }
        
        
        
    public async Task ResetPassword(string userId, string action, string oldPassword, string password, string confirmPassword)
    {
        
        if (action != "resetPassword")
        {
            throw new UnauthorizedAccessException();
        }
        
        Member? member = await _memberRepository.GetByIdAsync(int.Parse(userId));

        if (member is null)
        {
            throw new UnauthorizedAccessException();
        }
        
        if (!_passwordService.VerifyPassword(member.Password, oldPassword))
        {
            throw new InvalidPasswordException();
        }
        
        if (password != confirmPassword)
        {
            throw new PasswordsMatchException();
        }

        await _memberRepository.ChangePassword(member.Id, _passwordService.HashPassword(password));
        
    }
    
    private string GetBaseUrl()
    {
        if (_httpContextAccessor.HttpContext is not null)
        {
            HttpRequest request = _httpContextAccessor.HttpContext.Request;
            string baseUrl = $"{request.Scheme}://{request.Host}{request.PathBase}";
            return baseUrl;   
        }

        throw new HttpRequestException();
    }
    
    public async Task RequestPassword(string identifier)
    {
        Member? member = await _memberRepository.GetByEmail(identifier) ?? await _memberRepository.GetByPseudo(identifier);

        if (member is null)
        {
            throw new InvalidIdentifierException();
        }
        
        string token = _tokenService.GenerateTokenForResetPassword(member);

        string linkToReset = GetBaseUrl() + $"/resetPassword?token={token}"; 
        _mailService.SendMail(member.Email, member.Pseudo, MailTemplate.GetSubjectForResetPassword(member), MailTemplate.GetBodyForResetPassword(member, linkToReset));
    }

    public bool ValidateResetToken(string token)
    {
        return _tokenService.ValidateResetPasswordToken(token);
    }